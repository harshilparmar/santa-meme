{"version":3,"sources":["img/santa1.jpg","Canvas.jsx","App.js","reportWebVitals.js","index.js"],"names":["Canvas","canvasRef","useRef","imageRef","useState","text","setText","useEffect","context","current","getContext","onload","drawImage","font","direction","x","y","maxWidth","lineHeight","substr","words","flag","offset","push","length","line","n","testLine","measureText","width","fillText","wrapText","className","ref","height","alt","src","santa","style","display","type","onChange","e","target","value","maxLength","placeholder","onClick","canvas","toDataURL","link","document","createElement","download","href","click","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gOAAe,MAA0B,mCCgH1BA,EA9GA,WACb,IAAMC,EAAYC,iBAAO,MACnBC,EAAWD,iBAAO,MAFL,EAGKE,mBAAS,IAHd,mBAGZC,EAHY,KAGNC,EAHM,KAKnBC,qBAAU,WACR,IACMC,EADSP,EAAUQ,QACFC,WAAW,MAElCP,EAASM,QAAQE,OAAS,WACxBH,EAAQI,UAAUT,EAASM,QAAS,EAAG,MAExC,IAiCHF,qBAAU,WACR,IACMC,EADSP,EAAUQ,QACFC,WAAW,MAMlCF,EAAQK,KAAO,eACfL,EAAQM,UAAY,UAxCtB,SAAkBN,EAASH,EAAMU,EAAGC,EAAGC,EAAUC,GAC/Cb,EAAOA,EAAKc,OAAO,EAAG,IAMtB,IAJA,IAAIC,EAAQ,GACRC,GAAO,EAEPC,EAAS,EACND,GACLD,EAAMG,KAAKlB,EAAKc,OAAOG,EAHb,IAIVA,GAAU,EACNjB,EAAKmB,OAASF,IAChBD,GAAO,GAGX,IAAII,EAAO,GACXjB,EAAQI,UAAUT,EAASM,QAAS,EAAG,GACvC,IAAK,IAAIiB,EAAI,EAAGA,EAAIN,EAAMI,OAAQE,IAAK,CACrC,IAAIC,EAAWF,EAAOL,EAAMM,GAAK,IACnBlB,EAAQoB,YAAYD,GACVE,MACRZ,GAAYS,EAAI,GAC9BlB,EAAQsB,SAASL,EAAMV,EAAGC,GAC1BS,EAAOL,EAAMM,GAAK,IAClBV,GAAKE,GAELO,EAAOE,EAGXnB,EAAQsB,SAASL,EAAMV,EAAGC,GAa1Be,CAASvB,EAASH,EAJV,GACA,IAHO,IACE,MAMhB,CAACA,IAUJ,OACE,sBAAK2B,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,wBAAQC,IAAKhC,EAAW4B,MAAO,IAAKK,OAAQ,MAC5C,qBACEC,IAAI,QACJF,IAAK9B,EACLiC,IAAKC,EACLC,MAAO,CAAEC,QAAS,eAIxB,sBAAKP,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBACEA,UAAU,+BACVQ,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOpC,EAAQoC,EAAEC,OAAOC,QAClCA,MAAOvC,EACPwC,UAAU,KACVC,YAAY,iBAIhB,qBAAKd,UAAU,YAAf,SACE,wBACEQ,KAAK,SACLR,UAAU,6BACVe,QArCa,WACrB,IAAMC,EAAS/C,EAAUQ,QACzBuC,EAAOC,UAAU,aACjB,IAAIC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,SAAW,eAChBH,EAAKI,KAAON,EAAOC,YACnBC,EAAKK,SA4BC,2BASJ,qBAAKvB,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,cAAd,0CC9FKwB,MARf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.6de8d898.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/santa1.00b5fa8f.jpg\";","import React, { useEffect, useRef, useState } from \"react\";\r\nimport santa from \"./img/santa1.jpg\";\r\nconst Canvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    imageRef.current.onload = () => {\r\n      context.drawImage(imageRef.current, 5, 5);\r\n    };\r\n  }, []);\r\n\r\n  function wrapText(context, text, x, y, maxWidth, lineHeight) {\r\n    text = text.substr(0, 32);\r\n\r\n    let words = [];\r\n    let flag = true;\r\n    let limit = 8;\r\n    let offset = 0;\r\n    while (flag) {\r\n      words.push(text.substr(offset, limit));\r\n      offset += 8;\r\n      if (text.length < offset) {\r\n        flag = false;\r\n      }\r\n    }\r\n    let line = \"\";\r\n    context.drawImage(imageRef.current, 5, 5);\r\n    for (let n = 0; n < words.length; n++) {\r\n      let testLine = line + words[n] + \" \";\r\n      let metrics = context.measureText(testLine);\r\n      let testWidth = metrics.width;\r\n      if (testWidth > maxWidth && n > 0) {\r\n        context.fillText(line, x, y);\r\n        line = words[n] + \" \";\r\n        y += lineHeight;\r\n      } else {\r\n        line = testLine;\r\n      }\r\n    }\r\n    context.fillText(line, x, y);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    var maxWidth = 100;\r\n    var lineHeight = 40;\r\n    var x = 40;\r\n    var y = 320;\r\n    context.font = \"40px Courier\";\r\n    context.direction = \"inherit\";\r\n    wrapText(context, text, x, y, maxWidth, lineHeight);\r\n  }, [text]);\r\n\r\n  const handleDownload = () => {\r\n    const canvas = canvasRef.current;\r\n    canvas.toDataURL(\"image/png\");\r\n    var link = document.createElement(\"a\");\r\n    link.download = \"filename.png\";\r\n    link.href = canvas.toDataURL();\r\n    link.click();\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col col-sm-12 center\">\r\n          <canvas ref={canvasRef} width={530} height={500} />\r\n          <img\r\n            alt=\"santa\"\r\n            ref={imageRef}\r\n            src={santa}\r\n            style={{ display: \"none\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-11\">\r\n          <input\r\n            className=\"form-control form-control-lg\"\r\n            type=\"text\"\r\n            onChange={(e) => setText(e.target.value)}\r\n            value={text}\r\n            maxLength=\"32\"\r\n            placeholder=\"Enter text\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col col-1\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-height\"\r\n            onClick={handleDownload}\r\n          >\r\n            Download\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h1 className=\"text-center\">Murderous Santa Meme</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import './App.css';\nimport Canvas from './Canvas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}